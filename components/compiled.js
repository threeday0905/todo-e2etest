/********************************************
 * External Scripts generated by Flipper
 ********************************************/

/********************************************
 * Component Register generated by Flipper
 ********************************************/

/* [todo-input] - components/todo-input.html */
Flipper.register('todo-input', {
    template: { index: '\n        <div class="input-group">\n            <input type="text" class="form-control" placeholder="I want to ....">\n            <span class="input-group-btn">\n                <button class="btn btn-default" type="button">Do it!</button>\n            </span>\n        </div>\n    ' },
    ready: function () {
        var root = this;
        var ENTER_KEY = 13;
        function commit(value) {
            if (!value) {
                return;
            }
            var evt = new CustomEvent('commit', { detail: { value: value } });
            root.dispatchEvent(evt);
            root.querySelector('.form-control').value = '';
        }
        this.querySelector('.btn').addEventListener('click', function () {
            commit(root.querySelector('.form-control').value);
        }, false);
        this.querySelector('.form-control').addEventListener('keyup', function (ev) {
            if (ev.keyCode === ENTER_KEY) {
                commit(this.value);
            }
        }, false);
    }
});

/* [todo-list] - components/todo-list.html */
Flipper.register('todo-list', {
    templateEngine: 'xtpl',
    template: { index: '\n        {{#if (this && this.length) }}\n            <ul class="list-group">\n                {{#each (this) }}\n                    <li class="list-group-item">\n                        <span class="badge">{{xindex + 1}}</span>\n                        {{this}}\n                    </li>\n                {{/each}}\n            </ul>\n        {{else}}\n            <div class="alert alert-success">\n                <strong>Congrats</strong>, your queue is empty\n            </div>\n        {{/if}}\n    ' },
    fetch: function () {
        return [];
    },
    push: function (text) {
        this.model.push(text);
        this.refresh();
    },
    ready: function () {
    }
});